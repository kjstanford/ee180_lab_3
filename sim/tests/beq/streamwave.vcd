$date
	Tue Feb 27 14:37:15 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module userlogic_test $end
$var wire 32 ! data_out [31:0] $end
$var wire 15 " input_buffer_addr [14:0] $end
$var wire 15 # output_buffer_addr [14:0] $end
$var wire 32 $ ul_instr [31:0] $end
$var wire 32 % ul_instr_addr [31:0] $end
$var wire 32 & ul_read_addr [31:0] $end
$var wire 32 ' ul_read_data [31:0] $end
$var wire 32 ( ul_status [31:0] $end
$var wire 32 ) ul_test [31:0] $end
$var wire 32 * ul_write_addr [31:0] $end
$var wire 32 + ul_write_data [31:0] $end
$var wire 16 , ul_write_data_hi [15:0] $end
$var wire 16 - ul_write_data_lo [15:0] $end
$var wire 2 . ul_write_en_hi [1:0] $end
$var wire 2 / ul_write_en_lo [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 cycle_count [32:1] $end
$var integer 32 2 dump_vars [31:0] $end
$var reg 8192 3 dump_vars_filename [8192:1] $end
$var integer 32 4 i [31:0] $end
$var reg 10 5 image_n_columns [9:0] $end
$var reg 10 6 image_n_rows [9:0] $end
$var reg 8192 7 input_buffer_filename [8192:1] $end
$var reg 8192 8 instr_mem_filename [8192:1] $end
$var reg 32 9 num_cycles [32:1] $end
$var reg 33 : out_end_addr [32:0] $end
$var reg 33 ; out_start_addr [32:0] $end
$var integer 32 < outfile [31:0] $end
$var reg 8192 = output_buffer_filename [8192:1] $end
$var reg 15 > read_addr [14:0] $end
$var integer 32 ? read_input_buffer [31:0] $end
$var integer 32 @ read_instr_mem [31:0] $end
$var integer 32 A result [31:0] $end
$var reg 1 B rst_n $end
$var reg 8192 C test_result_filename [8192:1] $end
$var reg 32 D ul_command [31:0] $end
$var integer 32 E write_output_buffer [31:0] $end
$var integer 32 F write_test_result [31:0] $end
$scope module instr_mem $end
$var wire 14 G addr [13:0] $end
$var wire 1 H clk $end
$var wire 32 I din [31:0] $end
$var wire 1 J we $end
$var reg 32 K dout [31:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 15 L addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 M din [31:0] $end
$var wire 1 N we $end
$var reg 32 O dout [31:0] $end
$upscope $end
$scope module output_buffer $end
$var wire 15 P addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 Q din [31:0] $end
$var wire 4 R we [3:0] $end
$var reg 32 S dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$scope module ul $end
$var wire 1 T addr_cmd $end
$var wire 1 U addr_iobuf $end
$var wire 1 V addr_local $end
$var wire 1 W addr_status $end
$var wire 1 X addr_test $end
$var wire 1 H clk $end
$var wire 32 Y command [31:0] $end
$var wire 32 Z instr [31:0] $end
$var wire 32 [ instr_addr [31:0] $end
$var wire 32 \ mips_addr [31:0] $end
$var wire 32 ] mips_local_read_data [31:0] $end
$var wire 32 ^ mips_pc [31:0] $end
$var wire 32 _ mips_read_data [31:0] $end
$var wire 1 ` mips_read_en $end
$var wire 4 a mips_write_en [3:0] $end
$var wire 32 b read_addr_hi [31:0] $end
$var wire 32 c read_addr_lo [31:0] $end
$var wire 32 d read_data [31:0] $end
$var wire 16 e read_data_hi [15:0] $end
$var wire 16 f read_data_lo [15:0] $end
$var wire 1 g rst_n $end
$var wire 32 h status [31:0] $end
$var wire 32 i test [31:0] $end
$var wire 32 j write_addr_hi [31:0] $end
$var wire 32 k write_addr_lo [31:0] $end
$var wire 32 l write_data [31:0] $end
$var wire 16 m write_data_hi [15:0] $end
$var wire 16 n write_data_lo [15:0] $end
$var wire 2 o write_en_hi [1:0] $end
$var wire 2 p write_en_lo [1:0] $end
$var reg 32 q cmd_d [31:0] $end
$var reg 1 r read_cmd_d $end
$var reg 1 s read_iobuf_d $end
$var reg 32 t status_reg [31:0] $end
$var reg 32 u test_reg [31:0] $end
$scope module cpu $end
$var wire 32 v alu_op_x_ex [31:0] $end
$var wire 32 w alu_op_x_id [31:0] $end
$var wire 32 x alu_op_y_ex [31:0] $end
$var wire 32 y alu_op_y_id [31:0] $end
$var wire 1 z alu_op_y_zero_ex $end
$var wire 4 { alu_opcode_ex [3:0] $end
$var wire 4 | alu_opcode_id [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 32 ~ alu_result_ex [31:0] $end
$var wire 32 !" alu_result_mem [31:0] $end
$var wire 32 "" alu_sc_result_ex [31:0] $end
$var wire 1 #" atomic_en $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 %" en_if $end
$var wire 32 &" instr [31:0] $end
$var wire 32 '" instr_id [31:0] $end
$var wire 30 (" instr_number_id [29:0] $end
$var wire 32 )" instr_sav [31:0] $end
$var wire 32 *" jr_pc_id [31:0] $end
$var wire 1 +" jump_branch_id $end
$var wire 1 ," jump_reg_id $end
$var wire 1 -" jump_target_id $end
$var wire 32 ." mem_addr [31:0] $end
$var wire 1 /" mem_atomic_ex $end
$var wire 1 0" mem_atomic_id $end
$var wire 1 1" mem_byte_ex $end
$var wire 1 2" mem_byte_id $end
$var wire 1 3" mem_byte_mem $end
$var wire 1 4" mem_half_ex $end
$var wire 1 5" mem_half_id $end
$var wire 1 6" mem_half_mem $end
$var wire 32 7" mem_out [31:0] $end
$var wire 32 8" mem_read_data [31:0] $end
$var wire 32 9" mem_read_data_byte_extend [31:0] $end
$var wire 8 :" mem_read_data_byte_select [7:0] $end
$var wire 32 ;" mem_read_data_half_extend [31:0] $end
$var wire 16 <" mem_read_data_half_select [15:0] $end
$var wire 1 ` mem_read_en $end
$var wire 1 =" mem_read_ex $end
$var wire 1 >" mem_read_id $end
$var wire 1 ?" mem_read_mem $end
$var wire 1 @" mem_sc_ex $end
$var wire 1 A" mem_sc_id $end
$var wire 1 B" mem_sc_mask_id $end
$var wire 1 C" mem_signextend_ex $end
$var wire 1 D" mem_signextend_id $end
$var wire 1 E" mem_signextend_mem $end
$var wire 1 F" mem_we_ex $end
$var wire 1 G" mem_we_id $end
$var wire 32 H" mem_write_data [31:0] $end
$var wire 32 I" mem_write_data_ex [31:0] $end
$var wire 32 J" mem_write_data_id [31:0] $end
$var wire 4 K" mem_write_en [3:0] $end
$var wire 1 L" movn_ex $end
$var wire 1 M" movn_id $end
$var wire 1 N" movz_ex $end
$var wire 1 O" movz_id $end
$var wire 32 P" pc [31:0] $end
$var wire 32 Q" pc_id [31:0] $end
$var wire 32 R" pc_if [31:0] $end
$var wire 1 S" reg_we_cond_ex $end
$var wire 1 T" reg_we_ex $end
$var wire 1 U" reg_we_id $end
$var wire 1 V" reg_we_mem $end
$var wire 1 W" reg_we_wb $end
$var wire 5 X" reg_write_addr_ex [4:0] $end
$var wire 5 Y" reg_write_addr_id [4:0] $end
$var wire 5 Z" reg_write_addr_mem [4:0] $end
$var wire 5 [" reg_write_addr_wb [4:0] $end
$var wire 32 \" reg_write_data_mem [31:0] $end
$var wire 32 ]" reg_write_data_wb [31:0] $end
$var wire 5 ^" rs_addr_id [4:0] $end
$var wire 32 _" rs_data_id [31:0] $end
$var wire 1 `" rst $end
$var wire 1 a" rst_id $end
$var wire 5 b" rt_addr_id [4:0] $end
$var wire 32 c" rt_data_id [31:0] $end
$var wire 32 d" sc_result [31:0] $end
$var wire 1 e" stall $end
$var wire 1 f" stall_r $end
$scope module if_stage $end
$var wire 32 g" branch_addr [31:0] $end
$var wire 32 h" branch_offset [31:0] $end
$var wire 1 H clk $end
$var wire 1 %" en $end
$var wire 26 i" instr_id [25:0] $end
$var wire 32 j" j_addr [31:0] $end
$var wire 32 k" jr_pc [31:0] $end
$var wire 1 +" jump_branch $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 32 l" pc [31:0] $end
$var wire 32 m" pc_id [31:0] $end
$var wire 32 n" pc_id_p4 [31:0] $end
$var wire 32 o" pc_next [31:0] $end
$var wire 32 p" pc_next_b [31:0] $end
$var wire 32 q" pc_next_c [31:0] $end
$var wire 1 `" rst $end
$scope module pc_reg $end
$var wire 1 H clk $end
$var wire 32 r" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 `" r $end
$var reg 32 s" q [31:0] $end
$upscope $end
$upscope $end
$scope module pc_if2id $end
$var wire 1 H clk $end
$var wire 32 t" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 `" r $end
$var reg 32 u" q [31:0] $end
$upscope $end
$scope module instr_sav_dff $end
$var wire 1 H clk $end
$var wire 32 v" d [31:0] $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 32 w" q [31:0] $end
$upscope $end
$scope module stall_f_dff $end
$var wire 1 H clk $end
$var wire 1 e" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 x" q $end
$upscope $end
$scope module d_stage $end
$var wire 32 y" alu_op_x [31:0] $end
$var wire 32 z" alu_op_y [31:0] $end
$var wire 32 {" alu_op_y_temp [31:0] $end
$var wire 32 |" alu_result_ex [31:0] $end
$var wire 1 /" atomic_ex $end
$var wire 1 0" atomic_id $end
$var wire 1 }" forward_rs_ex $end
$var wire 1 ~" forward_rs_mem $end
$var wire 1 !# forward_rt_ex $end
$var wire 1 "# forward_rt_mem $end
$var wire 6 ## funct [5:0] $end
$var wire 32 $# imm [31:0] $end
$var wire 32 %# imm_extend [31:0] $end
$var wire 32 &# imm_sign_extend [31:0] $end
$var wire 32 '# imm_upper [31:0] $end
$var wire 32 (# imm_zero_extend [31:0] $end
$var wire 16 )# immediate [15:0] $end
$var wire 32 *# instr [31:0] $end
$var wire 1 +# isALUImm $end
$var wire 1 ,# isBEQ $end
$var wire 1 -# isBGEZAL $end
$var wire 1 .# isBGEZNL $end
$var wire 1 /# isBGTZ $end
$var wire 1 0# isBLEZ $end
$var wire 1 1# isBLTZAL $end
$var wire 1 2# isBLTZNL $end
$var wire 1 3# isBNE $end
$var wire 1 4# isBranchLink $end
$var wire 1 5# isEqual $end
$var wire 1 6# isGEZ $end
$var wire 1 7# isJ $end
$var wire 1 8# isJAL $end
$var wire 1 9# isJALR $end
$var wire 1 :# isJR $end
$var wire 1 ;# isLEZ $end
$var wire 1 <# isLUI $end
$var wire 1 =# isSLL $end
$var wire 1 ># isSLLV $end
$var wire 1 ?# isSRA $end
$var wire 1 @# isSRAV $end
$var wire 1 A# isSRL $end
$var wire 1 B# isSRLV $end
$var wire 1 C# isShift $end
$var wire 1 D# isShiftImm $end
$var wire 32 E# jr_pc [31:0] $end
$var wire 1 +" jump_branch $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 1 2" mem_byte $end
$var wire 1 5" mem_half $end
$var wire 1 >" mem_read $end
$var wire 1 =" mem_read_ex $end
$var wire 1 A" mem_sc_id $end
$var wire 1 B" mem_sc_mask_id $end
$var wire 1 D" mem_signextend $end
$var wire 1 G" mem_we $end
$var wire 32 F# mem_write_data [31:0] $end
$var wire 1 M" movn $end
$var wire 1 O" movz $end
$var wire 6 G# op [5:0] $end
$var wire 32 H# pc [31:0] $end
$var wire 5 I# rd_addr [4:0] $end
$var wire 1 J# read_from_rs $end
$var wire 1 K# read_from_rt $end
$var wire 1 U" reg_we $end
$var wire 1 T" reg_we_ex $end
$var wire 1 V" reg_we_mem $end
$var wire 5 L# reg_write_addr [4:0] $end
$var wire 5 M# reg_write_addr_ex [4:0] $end
$var wire 5 N# reg_write_addr_mem [4:0] $end
$var wire 5 O# reg_write_addr_temp [4:0] $end
$var wire 32 P# reg_write_data_mem [31:0] $end
$var wire 5 Q# rs_addr [4:0] $end
$var wire 32 R# rs_data [31:0] $end
$var wire 32 S# rs_data_in [31:0] $end
$var wire 32 T# rs_data_m [31:0] $end
$var wire 1 U# rs_mem_dependency $end
$var wire 5 V# rt_addr [4:0] $end
$var wire 32 W# rt_data [31:0] $end
$var wire 32 X# rt_data_in [31:0] $end
$var wire 32 Y# rt_data_m [31:0] $end
$var wire 5 Z# shamt [4:0] $end
$var wire 32 [# shift_amount [31:0] $end
$var wire 1 e" stall $end
$var wire 1 \# use_imm $end
$var reg 4 ]# alu_opcode [3:0] $end
$upscope $end
$scope module atomic $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 0" d $end
$var wire 1 #" en $end
$var wire 1 a" r $end
$var reg 1 ^# q $end
$upscope $end
$scope module sc $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 A" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 _# q $end
$upscope $end
$scope module alu_op_x_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 32 `# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 32 a# q [31:0] $end
$upscope $end
$scope module alu_op_y_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 32 b# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 32 c# q [31:0] $end
$upscope $end
$scope module alu_opcode_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 4 d# d [3:0] $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 4 e# q [3:0] $end
$upscope $end
$scope module movn $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 M" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 f# q $end
$upscope $end
$scope module movz $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 O" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 g# q $end
$upscope $end
$scope module mem_write_data_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 32 h# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 32 i# q [31:0] $end
$upscope $end
$scope module mem_we_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 j# d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 k# q $end
$upscope $end
$scope module mem_read_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 >" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 l# q $end
$upscope $end
$scope module mem_byte_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 2" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 m# q $end
$upscope $end
$scope module mem_half_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 5" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 n# q $end
$upscope $end
$scope module mem_signextend_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 D" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 o# q $end
$upscope $end
$scope module reg_write_addr_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 5 p# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 5 q# q [4:0] $end
$upscope $end
$scope module reg_we_id2ex $end
$var wire 1 `" ar $end
$var wire 1 H clk $end
$var wire 1 U" d $end
$var wire 1 $" en $end
$var wire 1 a" r $end
$var reg 1 r# q $end
$upscope $end
$scope module x_stage $end
$var wire 1 s# add_check $end
$var wire 1 t# add_neg_over $end
$var wire 1 u# add_pos_over $end
$var wire 1 v# alu_neg $end
$var wire 32 w# alu_op_x [31:0] $end
$var wire 32 x# alu_op_x_signed [31:0] $end
$var wire 32 y# alu_op_y [31:0] $end
$var wire 32 z# alu_op_y_signed [31:0] $end
$var wire 1 z alu_op_y_zero $end
$var wire 4 {# alu_opcode [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 1 |# sub_check $end
$var wire 1 }# sub_neg_over $end
$var wire 1 ~# sub_pos_over $end
$var wire 1 !$ x_neg $end
$var wire 1 "$ y_neg $end
$var reg 32 #$ alu_result [31:0] $end
$upscope $end
$scope module alu_result_ex2mem $end
$var wire 1 H clk $end
$var wire 32 $$ d [31:0] $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 32 %$ q [31:0] $end
$upscope $end
$scope module mem_read_ex2mem $end
$var wire 1 H clk $end
$var wire 1 =" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 &$ q $end
$upscope $end
$scope module mem_byte_ex2mem $end
$var wire 1 H clk $end
$var wire 1 1" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 '$ q $end
$upscope $end
$scope module mem_half_ex2mem $end
$var wire 1 H clk $end
$var wire 1 4" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 ($ q $end
$upscope $end
$scope module mem_signextend_ex2mem $end
$var wire 1 H clk $end
$var wire 1 C" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 )$ q $end
$upscope $end
$scope module reg_write_addr_ex2mem $end
$var wire 1 H clk $end
$var wire 5 *$ d [4:0] $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 5 +$ q [4:0] $end
$upscope $end
$scope module reg_we_ex2mem $end
$var wire 1 H clk $end
$var wire 1 T" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 ,$ q $end
$upscope $end
$scope module reg_write_data_mem2wb $end
$var wire 1 H clk $end
$var wire 32 -$ d [31:0] $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 32 .$ q [31:0] $end
$upscope $end
$scope module reg_write_addr_mem2wb $end
$var wire 1 H clk $end
$var wire 5 /$ d [4:0] $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 5 0$ q [4:0] $end
$upscope $end
$scope module reg_we_mem2wb $end
$var wire 1 H clk $end
$var wire 1 V" d $end
$var wire 1 $" en $end
$var wire 1 `" r $end
$var reg 1 1$ q $end
$upscope $end
$scope module w_stage $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 W" reg_we $end
$var wire 5 2$ reg_write_addr [4:0] $end
$var wire 32 3$ reg_write_data [31:0] $end
$var wire 5 4$ rs_addr [4:0] $end
$var wire 32 5$ rs_data [31:0] $end
$var wire 5 6$ rt_addr [4:0] $end
$var wire 32 7$ rt_data [31:0] $end
$upscope $end
$upscope $end
$scope module mips_local_store $end
$var wire 12 8$ addr [11:0] $end
$var wire 1 H clk $end
$var wire 32 9$ din [31:0] $end
$var wire 4 :$ we [3:0] $end
$var reg 32 ;$ dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;$
b0 :$
b0 9$
b0 8$
bx 7$
bx 6$
bx 5$
bx 4$
b0 3$
b0 2$
01$
b0 0$
b0 /$
b0 .$
b0 -$
0,$
b0 +$
b0 *$
0)$
0($
0'$
0&$
b0 %$
b0 $$
b0 #$
0"$
0!$
0~#
0}#
0|#
b0 {#
b0 z#
b0 y#
b0 x#
b0 w#
0v#
0u#
0t#
0s#
0r#
b0 q#
bx p#
0o#
0n#
0m#
0l#
0k#
xj#
b0 i#
bx h#
0g#
0f#
b0 e#
b1101 d#
b0 c#
bx b#
b0 a#
bx `#
0_#
0^#
b1101 ]#
x\#
b0xxxxx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
0U#
bx T#
bx S#
bx R#
bx Q#
b0 P#
bx O#
b0 N#
b0 M#
bx L#
xK#
xJ#
bx I#
b0 H#
bx G#
bx F#
bx E#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
bx *#
bx )#
b0xxxxxxxxxxxxxxxx (#
bx0000000000000000 '#
bx &#
bx %#
bx $#
bx ##
0"#
0!#
0~"
0}"
b0 |"
bx {"
bx z"
bx y"
0x"
b0 w"
bx v"
b0 u"
b0 t"
b0 s"
bx r"
bx q"
bx p"
bx o"
b100 n"
b0 m"
b0 l"
bx k"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 j"
bx i"
bx00 h"
bx g"
0f"
0e"
b0 d"
bx c"
bx b"
0a"
0`"
bx _"
bx ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
bx Y"
b0 X"
0W"
0V"
xU"
0T"
0S"
b0 R"
b0 Q"
b0 P"
xO"
0N"
xM"
0L"
b0 K"
bx J"
b0 I"
b0 H"
xG"
0F"
0E"
xD"
0C"
0B"
xA"
0@"
0?"
x>"
0="
bx <"
b0xxxxxxxxxxxxxxxx ;"
bx :"
b0xxxxxxxx 9"
bx 8"
bx 7"
06"
x5"
04"
03"
x2"
01"
00"
0/"
b0 ."
x-"
x,"
x+"
bx *"
b0 )"
b0 ("
bx '"
bx &"
1%"
1$"
x#"
b0 ""
b0 !"
b0 ~
0}
b1101 |
b0 {
1z
bx y
b0 x
bx w
b0 v
bx u
bx t
xs
xr
bx q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
0g
bx f
bx e
bx d
b0 c
b0 b
b0 a
0`
bx _
b0 ^
bx ]
b0 \
b0 [
bx Z
b0xxxxxxxxxxxxxxxxxxxx10 Y
0X
0W
1V
0U
0T
bx S
b0 R
b0 Q
b0 P
bx O
0N
b0 M
b0 L
bx K
0J
b0 I
0H
b0 G
b1 F
b0 E
b0xxxxxxxxxxxxxxxxxxxx10 D
b11101000110010101110011011101000111001100101111011000100110010101110001001011110111010001100101011100110111010000101110011100100110010101110011011101010110110001110100 C
0B
b1 A
b1 @
b0 ?
b0 >
bx =
bx <
b0 ;
b100000000000000000 :
b1111101000 9
b111010001100101011100110111010001110011001011110110001001100101011100010010111101100010011101010110100101101100011001000010111101100001011100000111000000101110011010000110010101111000 8
bx 7
bx 6
bx 5
bx 4
b11101000110010101110011011101000111001100101111011000100110010101110001001011110111001101110100011100100110010101100001011011010111011101100001011101100110010100101110011101100110001101100100 3
b1 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
bx $
b0 #
b0 "
bx !
$end
#5000
0C#
b0 [#
16#
b0 w
b0 y"
b0 `#
1;#
b100 o"
b100 r"
b0 R#
b0 *"
b0 k"
b0 E#
0D#
b100 q"
b0 T#
0+"
04#
b100 p"
b10000000000000100000000000000000 y
b10000000000000100000000000000000 z"
b10000000000000100000000000000000 b#
1U"
0j#
0#"
b0 _"
b0 S#
b0 5$
0.#
0-#
0/#
00#
02#
01#
b10000 Y"
b10000 L#
b10000 p#
b10000 O#
0:#
0,"
09#
0=#
0A#
0?#
0>#
0B#
0@#
b1100 ]#
b1100 |
b1100 d#
b11111111111111111000000000000010 %#
b10000000000000100000000000000000 $#
b11111111111111100000000000001100 g"
b11111111111111100000000000001000 h"
0,#
03#
0-"
07#
08#
1\#
0J#
0K#
1<#
0+#
0G"
0>"
02"
05"
1D"
0A"
b1111 G#
b0 ^"
b0 Q#
b0 4$
b10000 b"
b10000 V#
b10000 6$
b10000 I#
b0 Z#
0M"
0O"
b10 ##
b11111111111111111000000000000010 &#
b1000000000000010 (#
b10000000000000100000000000000000 '#
b1000000000000010 )#
b100001000000000000010 i"
b10000100000000000001000 j"
b111100000100001000000000000010 '"
b111100000100001000000000000010 *#
b111100000100001000000000000010 K
b111100000100001000000000000010 $
b111100000100001000000000000010 Z
b111100000100001000000000000010 &"
b111100000100001000000000000010 v"
bx S
bx ;$
b0 u
b0 )
b0 i
b0 t
b0 (
b0 h
0s
0r
b0 q
10
1H
#10000
00
0H
#15000
bx ;$
bx S
10
1H
#20000
1`"
00
0H
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
1B
1g
#25000
b10000000000000100000000000000000 {"
05#
b10000000000000100000000000000000 W#
b10000000000000100000000000000000 J"
b10000000000000100000000000000000 F#
b10000000000000100000000000000000 h#
bx ,
bx m
bx +
bx Q
bx -
bx n
0V
b1000 o"
b1000 r"
b10000000000000100000000000000000 Y#
bx l
bx H"
bx 9$
0u#
1~#
1v#
b1000 q"
b1 G
1T"
1!#
1"$
b10000000000000100000000000000000 #$
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 |"
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 $$
b1000 p"
b1 %
b1 [
bx S
bx ;$
1r#
1S"
b10000 q#
b10000 X"
b10000 M#
b10000 *$
1o#
1C"
bx i#
bx I"
b1100 e#
b1100 {
b1100 {#
b10000000000000100000000000000000 c#
b10000000000000100000000000000000 z#
0z
b10000000000000100000000000000000 x
b10000000000000100000000000000000 y#
b111100000100001000000000000010 w"
b111100000100001000000000000010 )"
b100 s"
b100 R"
b100 l"
b100 t"
b100 ^
b100 P"
10
1H
#30000
00
0H
b1111100111 1
b0xxxxxxxxxxxxxxxxxxxx01 D
b0xxxxxxxxxxxxxxxxxxxx01 Y
#35000
bx {"
x5#
bx W#
bx J"
bx F#
bx h#
b1 y
b1 z"
b1 b#
bx Y#
b10001 Y"
b10001 L#
b10001 p#
b0 O#
b11 ]#
b11 |
b11 d#
b1 %#
b1 $#
b100 h"
b1100 o"
b1100 r"
b1000000000000010 ,
b1000000000000010 m
b10000000000000100000000000000000 +
b10000000000000100000000000000000 Q
b0 -
b0 n
1J#
0<#
1+#
b1101 G#
0!#
b10001 b"
b10001 V#
b10001 6$
b0 I#
b1 ##
b1 &#
b1 (#
b10000000000000000 '#
b1 )#
b100010000000000000001 i"
b10001000000000000000100 j"
b1100 q"
b10 G
b10000000000000100000000000000000 l
b10000000000000100000000000000000 H"
b10000000000000100000000000000000 9$
b110100000100010000000000000001 '"
b110100000100010000000000000001 *#
b1100 p"
b10 %
b10 [
b1 ("
b10000000000000100000000000000000 \"
b10000000000000100000000000000000 P#
b10000000000000100000000000000000 -$
bx ;"
bx 9"
bx ;$
bx S
b110100000100010000000000000001 K
b110100000100010000000000000001 $
b110100000100010000000000000001 Z
b110100000100010000000000000001 &"
b110100000100010000000000000001 v"
b1000 s"
b1000 R"
b1000 l"
b1000 t"
b1000 ^
b1000 P"
b100 u"
b1100 g"
b1000 n"
b100 Q"
b100 m"
b100 H#
b10000000000000100000000000000000 i#
b10000000000000100000000000000000 I"
b10000000000000100000000000000000 %$
b10000000000000100000000000000000 !"
1)$
1E"
b10000 +$
b10000 Z"
b10000 N#
b10000 /$
1,$
1V"
10
1H
#40000
00
0H
b1111100110 1
#45000
b1111111111111111 y
b1111111111111111 z"
b1111111111111111 b#
b1111111111111111 $#
bx {"
b1000 Y"
b1000 L#
b1000 p#
b11111 O#
b1111111111111111 %#
b11111111111111111111111111111100 h"
bx ,
bx m
bx +
bx Q
bx -
bx n
1V
b10000 o"
b10000 r"
b1000 b"
b1000 V#
b1000 6$
b11111 I#
b11111 Z#
b111111 ##
b11111111111111111111111111111111 &#
b1111111111111111 (#
b11111111111111110000000000000000 '#
b1111111111111111 )#
b10001111111111111111 i"
b1000111111111111111100 j"
x5#
bx W#
bx J"
bx F#
bx h#
bx l
bx H"
bx 9$
0v#
b10000 q"
b11 G
b110100000010001111111111111111 '"
b110100000010001111111111111111 *#
bx Y#
0~#
0"$
b1 #$
b1 ~
b1 |"
0U
0W
b1 \
b1 ."
b1 ""
b1 $$
b10 ("
b10000 p"
b11 %
b11 [
b110100000010001111111111111111 K
b110100000010001111111111111111 $
b110100000010001111111111111111 Z
b110100000010001111111111111111 &"
b110100000010001111111111111111 v"
bx S
bx ;$
11$
1W"
b10000 0$
b10000 ["
b10000 2$
b10000000000000100000000000000000 .$
b10000000000000100000000000000000 ]"
b10000000000000100000000000000000 3$
b10001 q#
0!#
b10001 X"
b10001 M#
b10001 *$
bx i#
bx I"
b11 e#
b11 {
b11 {#
b1 c#
b1 z#
b1 x
b1 y#
b110100000100010000000000000001 w"
b110100000100010000000000000001 )"
b1000 u"
b1000 g"
b1100 n"
b1000 Q"
b1000 m"
b1000 H#
b1100 s"
b1100 R"
b1100 l"
b1100 t"
b1100 ^
b1100 P"
10
1H
#50000
00
0H
b1111100101 1
#55000
bx {"
b1001 Y"
b1001 L#
b1001 p#
b10100 o"
b10100 r"
b11111111111111 "
b11111111111111 L
b1001 b"
b1001 V#
b1001 6$
b10011111111111111111 i"
b1001111111111111111100 j"
b10100 q"
b100 G
b111111111111 8$
b11111111111111 j
b11111111111111 *
b11111111111111 k
b11111111111111 b
b11111111111111 &
b11111111111111 c
x5#
bx W#
bx J"
bx F#
bx h#
b110100000010011111111111111111 '"
b110100000010011111111111111111 *#
b10100 p"
b100 %
b100 [
b11 ("
b1111111111111111 #$
b1111111111111111 ~
b1111111111111111 |"
b1111111111111111 \
b1111111111111111 ."
b1111111111111111 ""
b1111111111111111 $$
bx Y#
b1 \"
b1 P#
b1 -$
bx ;$
bx S
b110100000010011111111111111111 K
b110100000010011111111111111111 $
b110100000010011111111111111111 Z
b110100000010011111111111111111 &"
b110100000010011111111111111111 v"
b10000 s"
b10000 R"
b10000 l"
b10000 t"
b10000 ^
b10000 P"
b1100 u"
b1100 g"
b10000 n"
b1100 Q"
b1100 m"
b1100 H#
b110100000010001111111111111111 w"
b110100000010001111111111111111 )"
b1111111111111111 c#
b1111111111111111 z#
b1111111111111111 x
b1111111111111111 y#
b1000 q#
0!#
b1000 X"
b1000 M#
b1000 *$
b1 %$
b1 !"
b10001 +$
b10001 Z"
b10001 N#
b10001 /$
10
1H
#60000
00
0H
b1111100100 1
#65000
b11111 [#
b1111111111111111 w
b1111111111111111 y"
b1111111111111111 `#
1+"
0;#
bx T#
b101 $#
b1111111111111111 {"
b1111111111111111 y
b1111111111111111 z"
b1111111111111111 b#
b0 Y"
b0 L#
b0 p#
b1111111111111111 R#
b1111111111111111 *"
b1111111111111111 k"
b1111111111111111 E#
bx _"
bx S#
bx 5$
b0 O#
b101 ]#
b101 |
b101 d#
b101 %#
b10100 h"
b101000 o"
b101000 r"
0U"
1,#
0\#
1K#
0+#
b100 G#
1~"
b1000 ^"
b1000 Q#
b1000 4$
b0 I#
b0 Z#
b101 ##
b101 &#
b101 (#
b1010000000000000000 '#
b101 )#
b1000010010000000000000101 i"
b100001001000000000000010100 j"
15#
b1111111111111111 W#
b1111111111111111 J"
b1111111111111111 F#
b1111111111111111 h#
b101000 q"
b101 G
b10001000010010000000000000101 '"
b10001000010010000000000000101 *#
b1111111111111111 \"
b1111111111111111 P#
b1111111111111111 -$
b1111111111111111 Y#
b100 ("
b101000 p"
b101 %
b101 [
b10001000010010000000000000101 K
b10001000010010000000000000101 $
b10001000010010000000000000101 Z
b10001000010010000000000000101 &"
b10001000010010000000000000101 v"
bx S
bx ;$
b10001 0$
b10001 ["
b10001 2$
b1 .$
b1 ]"
b1 3$
b1000 +$
b1000 Z"
b1000 N#
b1000 /$
b1111111111111111 %$
b1111111111111111 !"
b1001 q#
1!#
b1001 X"
b1001 M#
b1001 *$
b110100000010011111111111111111 w"
b110100000010011111111111111111 )"
b10000 u"
b101000 g"
b10100 n"
b10000 Q"
b10000 m"
b10000 H#
b10100 s"
b10100 R"
b10100 l"
b10100 t"
b10100 ^
b10100 P"
10
1H
#70000
00
0H
b1111100011 1
#75000
bx {"
b0 $#
b0 T#
b0 y
b0 z"
b0 b#
b10 Y"
b10 L#
b10 p#
bx W#
bx J"
bx F#
bx h#
b11 ]#
b11 |
b11 d#
b0 %#
b0 h"
b101100 o"
b101100 r"
b0 "
b0 L
b0 ,
b0 m
b1111111111111111 +
b1111111111111111 Q
b1111111111111111 -
b1111111111111111 n
b0 [#
16#
b0 _"
b0 S#
b0 5$
1U"
0,#
1\#
0K#
1+#
b1101 G#
b0 ^"
b0 Q#
b0 4$
b10 b"
b10 V#
b10 6$
b0 ##
b0 &#
b0 (#
b0 '#
b0 )#
b100000000000000000 i"
b10000000000000000000 j"
b1010 G
b101100 q"
b0 8$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b1111111111111111 l
b1111111111111111 H"
b1111111111111111 9$
b0 w
b0 y"
b0 `#
0+"
1;#
b110100000000100000000000000000 '"
b110100000000100000000000000000 *#
b1010 %
b1010 [
b101100 p"
b101 ("
b0 #$
b0 ~
b0 |"
b0 \
b0 ."
b0 ""
b0 $$
bx Y#
0"#
0T"
x5#
b0 R#
b0 *"
b0 k"
b0 E#
bx ;$
bx S
b110100000000100000000000000000 K
b110100000000100000000000000000 $
b110100000000100000000000000000 Z
b110100000000100000000000000000 &"
b110100000000100000000000000000 v"
b101000 s"
b101000 R"
b101000 l"
b101000 t"
b101000 ^
b101000 P"
b10100 u"
b11000 g"
b11000 n"
b10100 Q"
b10100 m"
b10100 H#
b10001000010010000000000000101 w"
b10001000010010000000000000101 )"
b1111111111111111 a#
b1111111111111111 x#
b1111111111111111 v
b1111111111111111 w#
b101 e#
b101 {
b101 {#
b1111111111111111 i#
b1111111111111111 I"
b0 q#
0!#
b0 X"
b0 M#
b0 *$
0r#
0S"
b1001 +$
0~"
b1001 Z"
b1001 N#
b1001 /$
b1111111111111111 .$
b1111111111111111 ]"
b1111111111111111 3$
b1000 0$
b1000 ["
b1000 2$
10
1H
#80000
00
0H
b1111100010 1
#85000
b110 y
b110 z"
b110 b#
b0 {"
b110 $#
b0 Y"
b0 L#
b0 p#
b0 c"
b0 X#
b0 7$
b1011 ]#
b1011 |
b1011 d#
b110 %#
b11000 h"
15#
b0 W#
b0 J"
b0 F#
b0 h#
bx ,
bx m
bx +
bx Q
bx -
bx n
b11000 o"
b11000 r"
0U"
0J#
1-"
17#
0K#
0+#
b10 G#
b0 b"
b0 V#
b0 6$
b110 ##
b110 &#
b110 (#
b1100000000000000000 '#
b110 )#
b110 i"
b11000 j"
b0 Y#
bx l
bx H"
bx 9$
b11000 q"
b1011 G
b1000000000000000000000000110 '"
b1000000000000000000000000110 *#
b0 \"
b0 P#
b0 -$
1T"
0!#
b1010 ("
b110000 p"
b1011 %
b1011 [
b1000000000000000000000000110 K
b1000000000000000000000000110 $
b1000000000000000000000000110 Z
b1000000000000000000000000110 &"
b1000000000000000000000000110 v"
bx S
bx ;$
b1001 0$
b1001 ["
b1001 2$
0,$
0V"
b0 +$
b0 Z"
b0 N#
b0 /$
b0 %$
b0 !"
1r#
1S"
b10 q#
b10 X"
b10 M#
b10 *$
bx i#
bx I"
b11 e#
b11 {
b11 {#
b0 c#
b0 z#
1z
b0 x
b0 y#
b0 a#
b0 x#
b0 v
b0 w#
b110100000000100000000000000000 w"
b110100000000100000000000000000 )"
b101000 u"
b1000100 g"
b101100 n"
b101000 Q"
b101000 m"
b101000 H#
b101100 s"
b101100 R"
b101100 l"
b101100 t"
b101100 ^
b101100 P"
10
1H
#90000
00
0H
b1111100001 1
#95000
b1 y
b1 z"
b1 b#
bx Y#
b1 $#
b11100 o"
b11100 r"
b10 Y"
b10 L#
b10 p#
bx c"
bx X#
bx 7$
b11 ]#
b11 |
b11 d#
b1 %#
b11100 q"
b100 h"
b0 ,
b0 m
b0 +
b0 Q
b0 -
b0 n
1U"
1J#
0-"
07#
1+#
b1101 G#
1"#
b10 b"
b10 V#
b10 6$
b1 ##
b1 &#
b1 (#
b10000000000000000 '#
b1 )#
b100000000000000001 i"
b10000000000000000100 j"
b110 G
b0 l
b0 H"
b0 9$
b110100000000100000000000000001 '"
b110100000000100000000000000001 *#
b11100 p"
b110 %
b110 [
b1011 ("
0T"
bx ;$
bx S
b110100000000100000000000000001 K
b110100000000100000000000000001 $
b110100000000100000000000000001 Z
b110100000000100000000000000001 &"
b110100000000100000000000000001 v"
b11000 s"
b11000 R"
b11000 l"
b11000 t"
b11000 ^
b11000 P"
b101100 u"
b110100 g"
b110000 n"
b101100 Q"
b101100 m"
b101100 H#
b1000000000000000000000000110 w"
b1000000000000000000000000110 )"
b110 c#
b110 z#
0z
b110 x
b110 y#
b1011 e#
b1011 {
b1011 {#
b0 i#
b0 I"
b0 q#
b0 X"
b0 M#
b0 *$
0r#
0S"
b10 +$
b10 Z"
b10 N#
b10 /$
1,$
1V"
b0 .$
b0 ]"
b0 3$
b0 0$
b0 ["
b0 2$
01$
0W"
10
1H
#100000
00
0H
b1111100000 1
#105000
06#
b10000000000000100000000000000000 w
b10000000000000100000000000000000 y"
b10000000000000100000000000000000 `#
1;#
b10000000000000100000000000000000 R#
b10000000000000100000000000000000 *"
b10000000000000100000000000000000 k"
b10000000000000100000000000000000 E#
b100 y
b100 z"
b100 b#
b10000000000000100000000000000000 T#
b100 $#
0U"
1j#
b10000000000000100000000000000000 _"
b10000000000000100000000000000000 S#
b10000000000000100000000000000000 5$
b1101 ]#
b1101 |
b1101 d#
b100 %#
b10000 h"
b0 c"
b0 X#
b0 7$
b1 {"
b100000 o"
b100000 r"
1K#
0+#
1G"
b101011 G#
b10000 ^"
b10000 Q#
b10000 4$
b100 ##
b100 &#
b100 (#
b1000000000000000000 '#
b100 )#
b10000000100000000000000100 i"
b1000000010000000000000010000 j"
b1 Y#
b100000 q"
b111 G
b10101110000000100000000000000100 '"
b10101110000000100000000000000100 *#
05#
b1 W#
b1 J"
b1 F#
b1 h#
1T"
1!#
b1 #$
b1 ~
b1 |"
b1 \
b1 ."
b1 ""
b1 $$
b110 ("
b100000 p"
b111 %
b111 [
b10101110000000100000000000000100 K
b10101110000000100000000000000100 $
b10101110000000100000000000000100 Z
b10101110000000100000000000000100 &"
b10101110000000100000000000000100 v"
bx S
bx ;$
11$
1W"
b10 0$
b10 ["
b10 2$
0,$
0V"
b0 +$
0"#
b0 Z"
b0 N#
b0 /$
1r#
1S"
b10 q#
b10 X"
b10 M#
b10 *$
b11 e#
b11 {
b11 {#
b1 c#
b1 z#
b1 x
b1 y#
b110100000000100000000000000001 w"
b110100000000100000000000000001 )"
b11000 u"
b101100 g"
b11100 n"
b11000 Q"
b11000 m"
b11000 H#
b11100 s"
b11100 R"
b11100 l"
b11100 t"
b11100 ^
b11100 P"
10
1H
#110000
00
0H
b1111011111 1
#115000
b0 y
b0 z"
b0 b#
b1 {"
b1 c"
b1 X#
b1 7$
b0 $#
b10001 Y"
b10001 L#
b10001 p#
b0 %#
b0 h"
b100100 o"
b100100 r"
0V
b1 "
b1 L
b1 +
b1 Q
b1 -
b1 n
b0 :$
b1 W#
b1 J"
b1 F#
b1 h#
b10001 b"
b10001 V#
b10001 6$
b0 ##
b0 &#
b0 (#
b0 '#
b0 )#
b10000100010000000000000000 i"
b1000010001000000000000000000 j"
b100100 q"
b1000 G
0u#
1v#
b1 8$
b1 j
b1 *
b1 k
b1 b
b1 &
b1 c
b1 l
b1 H"
b1 9$
b1111 a
b1111 K"
b1 Y#
0"#
b10101110000100010000000000000000 '"
b10101110000100010000000000000000 *#
b100100 p"
b1000 %
b1000 [
b111 ("
0}#
1!$
b10000000000000100000000000000100 #$
b10000000000000100000000000000100 ~
b10000000000000100000000000000100 |"
1X
b10000000000000100000000000000100 \
b10000000000000100000000000000100 ."
b10000000000000100000000000000100 ""
b10000000000000100000000000000100 $$
0T"
0!#
b1 \"
b1 P#
b1 -$
bx ;$
bx S
b10101110000100010000000000000000 K
b10101110000100010000000000000000 $
b10101110000100010000000000000000 Z
b10101110000100010000000000000000 &"
b10101110000100010000000000000000 v"
b100000 s"
b100000 R"
b100000 l"
b100000 t"
b100000 ^
b100000 P"
b11100 u"
b100000 g"
b100000 n"
b11100 Q"
b11100 m"
b11100 H#
b10101110000000100000000000000100 w"
b10101110000000100000000000000100 )"
b10000000000000100000000000000000 a#
b10000000000000100000000000000000 x#
b10000000000000100000000000000000 v
b10000000000000100000000000000000 w#
b100 c#
b100 z#
b100 x
b100 y#
b1101 e#
1s#
b1101 {
b1101 {#
b1 i#
b1 I"
1k#
1F"
0r#
0S"
b1 %$
b1 !"
b10 +$
b10 Z"
b10 N#
b10 /$
1,$
1V"
b0 0$
b0 ["
b0 2$
01$
0W"
10
1H
#120000
00
0H
b1111011110 1
#125000
16#
b0 {"
b0 w
b0 y"
b0 `#
15#
b0 R#
b0 *"
b0 k"
b0 E#
b0 W#
b0 J"
b0 F#
b0 h#
b1000 y
b1000 z"
b1000 b#
b0 T#
b0 Y#
b1000 $#
0j#
b0 _"
b0 S#
b0 5$
b0 Y"
b0 L#
b0 p#
b0 c"
b0 X#
b0 7$
b1011 ]#
b1011 |
b1011 d#
b1000 %#
b100000 h"
b0 "
b0 L
b100000 o"
b100000 r"
0K#
0J#
1-"
17#
0G"
b10 G#
b0 ^"
b0 Q#
b0 4$
b0 b"
b0 V#
b0 6$
b1000 ##
b1000 &#
b1000 (#
b10000000000000000000 '#
b1000 )#
b1000 i"
b100000 j"
b0 8$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b100000 q"
b1001 G
b1000000000000000000000001000 '"
b1000000000000000000000001000 *#
b10000000000000100000000000000100 \"
b10000000000000100000000000000100 P#
b10000000000000100000000000000100 -$
b10000000000000100000000000000000 #$
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 |"
0X
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 $$
b1000 ("
b101000 p"
b1001 %
b1001 [
b1000000000000000000000001000 K
b1000000000000000000000001000 $
b1000000000000000000000001000 Z
b1000000000000000000000001000 &"
b1000000000000000000000001000 v"
bx S
bx ;$
b1 u
b1 )
b1 i
11$
1W"
b10 0$
b10 ["
b10 2$
b1 .$
b1 ]"
b1 3$
0,$
0V"
b10000000000000100000000000000100 %$
b10000000000000100000000000000100 !"
b10001 q#
b10001 X"
b10001 M#
b10001 *$
b0 c#
b0 z#
1z
b0 x
b0 y#
b10101110000100010000000000000000 w"
b10101110000100010000000000000000 )"
b100000 u"
b1000100 g"
b100100 n"
b100000 Q"
b100000 m"
b100000 H#
b100100 s"
b100100 R"
b100100 l"
b100100 t"
b100100 ^
b100100 P"
10
1H
#130000
00
0H
b1111011101 1
#135000
1C#
1D#
b0 $#
b100100 o"
b100100 r"
b0 y
b0 z"
b0 b#
1=#
b1010 ]#
b1010 |
b1010 d#
b0 %#
b100100 q"
b0 h"
1V
b0 +
b0 Q
b0 -
b0 n
1U"
1K#
0J#
0-"
07#
0\#
b0 G#
b0 ##
b0 &#
b0 (#
b0 '#
b0 )#
b0 i"
b0 j"
b1000 G
0v#
b0 .
b0 o
b0 R
b0 /
b0 p
b0 l
b0 H"
b0 9$
b0 a
b0 K"
b0 '"
b0 *#
b100100 p"
b1000 %
b1000 [
b1001 ("
0!$
b0 #$
b0 ~
b0 |"
0U
0W
b0 \
b0 ."
b0 ""
b0 $$
b10000000000000100000000000000000 \"
b10000000000000100000000000000000 P#
b10000000000000100000000000000000 -$
b1 t
b1 (
b1 h
bx ;$
bx S
b0 K
b0 $
b0 Z
b0 &"
b0 v"
b100000 s"
b100000 R"
b100000 l"
b100000 t"
b100000 ^
b100000 P"
b100100 u"
b101000 g"
b101000 n"
b100100 Q"
b100100 m"
b100100 H#
b1000000000000000000000001000 w"
b1000000000000000000000001000 )"
b0 a#
b0 x#
b0 v
b0 w#
b1000 c#
b1000 z#
0z
b1000 x
b1000 y#
b1011 e#
0s#
b1011 {
b1011 {#
b0 i#
b0 I"
0k#
0F"
b0 q#
b0 X"
b0 M#
b0 *$
b10000000000000100000000000000000 %$
b10000000000000100000000000000000 !"
b10001 +$
b10001 Z"
b10001 N#
b10001 /$
b10000000000000100000000000000100 .$
b10000000000000100000000000000100 ]"
b10000000000000100000000000000100 3$
01$
0W"
10
1H
#140000
00
0H
b10000000000000000000000000000011 4
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
